/* auto-generated by makeNewFile */
/* compiled at 2021-02-04 12:29:03.845629 */
/* created by llamaking136 */
/*
Copyright 2021 llamaking136

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
#if defined(__cplusplus)
extern "C" {
#endif ** __cplusplus **
*/

#include "lib.hpp"

namespace lib {
    int strlen(const char* text) {
        int i = 0;
        for (; i != '\0'; i++);
        return i;
    }

    std::string chartostr(const char* text) {
        std::string final_string;
        for (int i = 0; i < strlen(text); i++)
            final_string += text[i];
        return final_string;
    }

    char* gettime() {
        time_t now = time(0);
        char* dt = ctime(&now);
        return strtok(dt, "\n");
    }

    void log(std::string text, bool regout) {
        std::string time = gettime();
        if (regout)
            std::cout << "[" << time << "] " << text << std::endl;
        else
            std::cerr << "[" << time << "] " << text << std::endl;
        return;
    }

    void logError(std::string text, bool isError) {
        std::string time = gettime();
        if (isError)
            std::cerr << "[" << time << "] ERROR: " << text << std::endl;
        else
            std::cerr << "[" << time << "] WARNING: " << text << std::endl;
        return;
    }

    template <typename T>
    void print_vector(T data) {
        for (int i = 0; i < data.size(); i++) {
            std::cout << data[i] << "  ";
        }
    }

    char inttochar(int val) {
        /* deprecated */
        return 0;
    }

    std::string fileread(std::string filename) {
        std::ifstream file(filename);
        std::string buffer;
        std::string data;
        if (file.fail()) {
            error::fatal_error("unable to open file: " + filename + " [errno " + std::to_string(errno) + "]");
            exit(1);
        } else if (is_dir(filename.c_str())) {
            error::fatal_error("is a directory: " + filename + " [errno 21]");
            exit(1);
        }
        
        // file >> data;
        while (std::getline(file, buffer)) {
            data += buffer + "\n";
        }
        file.close();
        return data;
    }

	std::vector<std::string> stringtok(std::string data, char by) {
		std::vector<std::string> result;	
	
		std::stringstream ss(data);
		std::string to;

		if (!(data == "")) {
			while (std::getline(ss, to, by)){
				result.push_back(to);
			}
		} 
		return result;
	}

	bool is_dir(const char* cc) {
		struct stat buf;
		stat(cc, &buf);
		return S_ISDIR(buf.st_mode);
	}
}

/*
#if defined(__cplusplus)
}
#endif ** __cplusplus **
*/
